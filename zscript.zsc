Version "4.8.2"

#include "zscript/50OMGBoss.zsc"
#include "zscript/ScopelessBoss.zsc"
#include "zscript/Bossmerg.zsc"
#include "zscript/M1 Garand.zsc"
#include "zscript/Shitbossting.zsc"
#include "zscript/SpeedReloader.zsc"
// Commented out as I'll probably redo it from scratch. - [Ted]
//#include "zscript/DedicatedMedicalScanner.zsc"

//-------------------------------------------------
// Huge credits to FDA for the Radtech Event handler which this is based off of. It's been incredibly helpful.
//-------------------------------------------------

// Struct for itemspawn information. 
class HexaSpawnItem play
{
	string spawnname; // ID by string for spawner
	Array<HexaSpawnItemEntry> spawnreplaces; // ID by string for spawnees
	int spawnreplacessize; // Cached size of the above array
	bool isPersistent; // Whether or not to persistently spawn.
	bool replaceitem;
}

class HexaSpawnItemEntry play
{
	string name;
	int    chance;
}

// Struct for passing useinformation to ammunition. 
class HexaSpawnAmmo play
{
	string		  ammoname;		   // ID by string for the header ammo.
	Array<string> weaponnames;     // ID by string for weapons using that ammo.
	int           weaponnamessize; // Cached size of the above array
}

// One handler to rule them all. 
class HexaDokenHandler : EventHandler
{
	// List of persistent classes to completely ignore. 
	// This -should- mean this mod has no performance impact. 
	static const class<actor> blacklist[] =
	{
		"HDSmoke",
		"BloodTrail",
		"CheckPuff",
		"WallChunk",
		"HDBulletPuff",
		"HDFireballTail",
		"ReverseImpBallTail",
		"HDSmokeChunk",
		"ShieldSpark",
		"HDFlameRed",
		"HDMasterBlood",
		"PlantBit",
		"HDBulletActor",
		"HDLadderSection"
	};

	// List of weapon-ammo associations.
	// Used for ammo-use association on ammo spawn (happens very often). 
	array<HexaSpawnAmmo> ammospawnlist;
	int ammospawnlistsize;
	
	// List of item-spawn associations.
	// used for item-replacement on mapload. 
	array<HexaSpawnItem> itemspawnlist;
	int itemspawnlistsize;
	
	// appends an entry to itemspawnlist;
	void additem(string name, Array<HexaSpawnItemEntry> replacees, bool persists, bool rep=true)
	{
		// Creates a new struct;
		HexaSpawnItem spawnee = HexaSpawnItem(new('HexaSpawnItem'));
		
		// Populates the struct with relevant information,
		spawnee.spawnname = name;
		spawnee.isPersistent = persists;
		spawnee.replaceitem = rep;
		for(int i = 0; i < replacees.size(); i++)
		{
			spawnee.spawnreplaces.push(replacees[i]);
			spawnee.spawnreplacessize++;
		}
		
		// Pushes the finished struct to the array. 
		itemspawnlist.push(spawnee);
		itemspawnlistsize++;
	}

	HexaSpawnItemEntry additementry(string name, int chance)
	{
		// Creates a new struct;
		HexaSpawnItemEntry spawnee = HexaSpawnItemEntry(new('HexaSpawnItemEntry'));
		spawnee.name = name.makelower();
		spawnee.chance = chance;
		return spawnee;
	}

	// appends an entry to ammospawnlist;
	void addammo(string name, Array<string> weapons)
	{
	
		// Creates a new struct;
		HexaSpawnAmmo spawnee = HexaSpawnAmmo(new('HexaSpawnAmmo'));
		spawnee.ammoname = name.makelower();
		
		// Populates the struct with relevant information,
		for(int i = 0; i < weapons.size(); i++)
		{
			spawnee.weaponnames.push(weapons[i].makelower());
			spawnee.weaponnamessize++;
		}
		
		// Pushes the finished struct to the array. 
		ammospawnlist.push(spawnee);
		ammospawnlistsize++;
	}
	
	bool cvarsAvailable;
	// Populates the replacement and association arrays. 
	void init()
	{
		cvarsAvailable = true;

	//-------------------------------------------------
	// Ammo Management
	//-------------------------------------------------

		// 7mm Clips
		Array<string> wep_7mmClip;
		wep_7mmClip.push("NoScopeBoss");
		addammo('HD7mClip', wep_7mmClip);

		// 7mm
		Array<string> wep_7mm;
		wep_7mm.push("NoScopeBoss");
		addammo('SevenMilAmmo', wep_7mm);
		wep_7mm.push("BossRifleButItsTheWorst");
		addammo('SevenMilAmmo', wep_7mm);

		// 9mm
		Array<string> wep_9mm;
		wep_9mm.push("BossRifleButIts9mm");
		addammo('HDPistolAmmo', wep_9mm);

		// 4mm
		Array<string> wep_4mm;
		wep_4mm.push("BossRifleButIts4mm");
		addammo('FourMilAmmo', wep_4mm);

		// 5mm
		Array<string> wep_5mm;
		wep_5mm.push("BossRifleButItsFuckingPink");
		addammo('HD5MM_Ammo', wep_5mm);
		
		// 7mm Recast
		Array<string> wep_7mmR;
		wep_7mmR.push("NoScopeBoss");
		addammo('SevenMilAmmoRecast', wep_7mmR);

		// .50 OMG
		Array<string> wep_50OMG;
		wep_50OMG.push("BogRifle");
		addammo('HD50OMGAmmo', wep_50OMG);

		// .30-06
		Array<string> wep_3006;
		wep_3006.push("M1Garand");
		addammo('ThirtyAughtSixAmmo', wep_3006);

		// 12 Gauge Shells
		Array<string> wep_Shells;
		wep_Shells.push("Bossmerg");
		addammo('HDShellAmmo', wep_Shells);

	//-------------------------------------------------
	// Weapon Spawns
	//-------------------------------------------------

		// No-scope Boss Rifle
		Array<HexaSpawnItemEntry> spawns_NoScopeBoss;
		spawns_NoScopeBoss.push(additementry('BossRifle', nsb_boss_spawn_bias));
		additem('NoScopeBossSpawner', spawns_NoScopeBoss, nsb_persistent_spawning);

		// Bossmerg
		Array<HexaSpawnItemEntry> spawns_Bossmerg;
		spawns_Bossmerg.push(additementry('Hunter', bas_hunter_spawn_bias));
		additem('Bossmerg', spawns_Bossmerg, bas_persistent_spawning);

		// M1 Garand
		Array<HexaSpawnItemEntry> spawns_Garand;
		spawns_Garand.push(additementry('LiberatorRifle', gar_shellbox_spawn_bias));
		additem('HDGarandRandom', spawns_Garand, gar_persistent_spawning);

		// .50 OMG Boss Rifle
		Array<HexaSpawnItemEntry> spawns_BogRifle;
		spawns_BogRifle.push(additementry('ThunderBuster', bog_plasma_spawn_bias));
		spawns_BogRifle.push(additementry('Slayer', bog_ssg_spawn_bias));
		spawns_BogRifle.push(additementry('Vulcanette', bog_chaingun_spawn_bias));
		additem('BogRifleSpawner', spawns_BogRifle, bog_persistent_spawning);
	}
	
	// Random stuff, stores it and forces negative values just to be 0.
	bool giverandom(int chance)
	{
		bool result = false;
		int iii = random(0, chance);
		if(iii < 0)
			iii = 0;
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	// Tries to create the item via random spawning.
	bool trycreateitem(worldevent e, HexaSpawnItem f, int g, bool rep)
	{
		bool result = false;
		if(giverandom(f.spawnreplaces[g].chance))
		{
			vector3 spawnpos = e.thing.pos;
			let spawnitem = Actor.Spawn(f.spawnname, (spawnpos.x, spawnpos.y, spawnpos.z));
			if(spawnitem)
			{
				if(rep)
				{
					e.thing.destroy();
					result = true;
				}
			}

		}
		return result;
	}
	
	override void worldthingspawned(worldevent e)
	 {
		string candidatename;
		
		// loop controls.
		int i, j;
		bool isAmmo = false;

		// Return if range.
        if(level.MapName ~== "RANGE")
        {
                return;
        }
		
		// Populates the main arrays if they haven't been already. 
		if(!cvarsAvailable)
			init();
		
		
		for(i = 0; i < blacklist.size(); i++)
		{
			if (e.thing is blacklist[i])
				return;
		}
		
		// Checks for null events. 
		if(!e.Thing)
		{
			return;
		}
		candidatename  = e.Thing.GetClassName();
		candidatename = candidatename.makelower();
		
		// Pointers for specific classes.
		let ammo_ptr   = HDAmmo(e.Thing);
		
		// Whether or not an item can use this.
		if(ammo_ptr)
		{
			// Goes through the entire ammospawn array.
			for(i = 0; i < ammospawnlistsize; i++)
			{
				if(candidatename == ammospawnlist[i].ammoname)
				{
					// Appends each entry in that ammo's subarray.
					for(j = 0; j < ammospawnlist[i].weaponnamessize; j++)
					{
						// Actual pushing to itemsthatusethis().
						if(ammo_ptr)
							ammo_ptr.ItemsThatUseThis.Push(ammospawnlist[i].weaponnames[j]);
					}
				}
			}
		}
						
		// Iterates through the list of item candidates for e.thing.
		for(i = 0; i < itemspawnlistsize; i++)
		{
			// Tries to cast the item as an inventory. 
			let thing_inv_ptr = Inventory(e.thing);
		
			// Checks if the item in question is owned.
			bool owned    = thing_inv_ptr && (thing_inv_ptr.owner);

			// Checks if the level has been loaded more than 1 tic.
			bool prespawn = !(level.maptime > 1);
			
			// Checks if persistent spawning is on.
			bool persist  = (itemspawnlist[i].isPersistent);
			
			
			
			// if an item is owned or is an ammo (doesn't retain owner ptr), 
			// do not replace it. 
			if ((prespawn || persist) && (!owned && (!ammo_ptr || prespawn)))
			{
				int original_i = i;
				for(j = 0; j < itemspawnlist[original_i].spawnreplacessize; j++)
				{
					if(itemspawnlist[i].spawnreplaces[j].name == candidatename)
					{
						if(trycreateitem(e, itemspawnlist[i], j, itemspawnlist[i].replaceitem))
						{
							j = itemspawnlist[i].spawnreplacessize;
							i = itemspawnlistsize;
						}
					}
				}
			}
		}
	}
}

enum bossstatus{
	BOSSF_FRONTRETICLE=1,
	BOSSF_CUSTOMCHAMBER=2,
	BOSSF_UNLOADONLY=4,
	BOSSF_DONTUSECLIPS=8,
	BOSSF_YEETABLE=16,

	BOSSS_CHAMBER=1, //0=nothing, 1=brass, 2=loaded, 3/4=jammed brass/round
	BOSSS_MAG=2,
	BOSSS_ZOOM=3,
	BOSSS_DROPADJUST=4,
	BOSSS_HEAT=5,
	BOSSS_HAND=6,
	BOSSS_GRIME=7,
}