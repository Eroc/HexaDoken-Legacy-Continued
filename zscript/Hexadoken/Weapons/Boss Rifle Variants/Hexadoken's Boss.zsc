class BossRifleButItsFuckingPink:BossRifle{
	default{
		tag "$TAG_5MMBOSS";
		hdweapon.refid "";
	}

	override string pickupmessage(){
		return "You got "..gettag().."!";
	}

	class<Inventory> lrammo, actualammo;
	class<HDDebris> looseammo, spentammo;
	override void postbeginplay(){
		super.postbeginplay();
		string lol = "HD5MM_Ammo"; lrammo = lol;
		lol = "HDSpent5mmMR"; spentammo = lol;
		if (lrammo) {
			actualammo = lrammo; 
			looseammo = "HDLoose5mmMR";
		}
		else {
			actualammo = "HDPistolAmmo";
			looseammo = "HDLoose9mm";
			spentammo = "HDSpent9mm";
		}
	}
	override double weaponbulk(){
		return 144+weaponstatus[BOSSS_MAG]*ENC_9_LOADED*0.05;
	}
	override void DropOneAmmo(int amt){
		if(owner){
			if(owner.countinv(actualammo))owner.A_DropInventory(actualammo,10);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory(actualammo,28);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Work bolt\n"
		..WEPHELP_RELOADRELOAD
		..WEPHELP_ZOOM.."+"..WEPHELP_FIREMODE.."  Zoom\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_USE.."  Bullet drop\n"
		..WEPHELP_ALTFIRE.."+"..WEPHELP_UNLOAD.."  Unload chamber/Clean rifle\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override string,double getpickupsprite(){return "BOJG]0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			if (lrammo)
				sb.drawimage("5MMZA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			else
				sb.drawimage("PRNDA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			sb.drawnum(hpl.countinv(actualammo),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[BOSSS_MAG],27);
		sb.drawwepcounter(hdw.weaponstatus[BOSSS_CHAMBER],
			-16,-10,"blank","RBRSA1A5","RBRSA3A7","RBRSA4A6"
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	states{
	select0:
		BOJG P 0;
		goto select0bfg;
	deselect0:
		BOJG P 0;
		goto deselect0big;

	ready:
		BOJG P 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;
	fire:
		BOJG P 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG P 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=1;
			A_StartSound("weapons/pinkboss",CHAN_WEAPON,CHANF_OVERLAP,
				pitch:!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?1.1:1.
			);
			A_AlertMonsters();

			HDBulletActor.FireBullet(self,"HDB_Pink",
				aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
				speedfactor:(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?0.99:1.07
			);
			A_MuzzleClimb(
				0,0,
				-frandom(0.03,0.06),-frandom(0.04,0.08),
				-frandom(0.06,0.1),-frandom(0.09,0.15),
				-frandom(0.06,0.1),-frandom(0.09,0.15)
			);
		}
		BOJG X 1;
		BOJG X 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.99);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG P 1 offset(0,34) A_WeaponBusy();
		BOJG Q 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG Q 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG Q 1 offset(0,34);
		BOJG Q 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG Q 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG T 1 A_WeaponReady(WRF_NOFIRE);
		BOJG T 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG T 0 A_StartSound("weapons/boltfwd",8);
		BOJG SR 2 A_WeaponReady(WRF_NOFIRE);
		BOJG Q 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG T 1 offset(2,36) A_ClearRefire();
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG T 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG T 2 offset(8,60);
		BOJG T 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory(invoker.actualammo,0,"null")){
					class<actor> whatkind=chm==2?invoker.looseammo:invoker.spentammo;
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,invoker.actualammo,1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory(invoker.actualammo,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG T 2 offset(7,72);
		BOJG T 2 offset(8,60);
		BOJG T 1 offset(7,52);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG T 1 offset(2,36) A_ClearRefire();
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG T 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG T 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG T 1 offset(7,52);
		BOJG T 1 offset(8,48);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(2,36);
		goto althold;
	jam:
		BOJG P 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG P 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG S 1 offset(4,38);
		BOJG S 2 offset(2,36);
		BOJG S 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG S 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG S 2 offset(4,38);
		BOJG S 3 offset(2,36);
		BOJG P 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG R 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG S 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG S 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG S 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					invoker.looseammo,cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					invoker.spentammo,cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			if(invoker.weaponstatus[BOSSS_MAG]>0){  
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
				invoker.weaponstatus[BOSSS_MAG]--;
			}else invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG T 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG T 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 0{invoker.weaponstatus[0]&=~BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	altreload:
		---- A 0{invoker.weaponstatus[0]|=BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	reloadstart:
		BOJG P 1 offset(0,34);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(4,40);
		BOJG P 2 offset(8,42){
			A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,0.9,pitch:0.95);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG P 4 offset(14,46){
			A_StartSound("weapons/rifleload",8,CHANF_OVERLAP);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG P 0{
			int mg=invoker.weaponstatus[BOSSS_MAG];
			if(mg==27)setweaponstate("reloaddone");
			else if(invoker.weaponstatus[0]&BOSSF_DONTUSECLIPS)setweaponstate("loadhand");
			/*else if(
				(
					mg<1
					||!countinv("SevenMilAmmo")
				)&&!HDMagAmmo.NothingLoaded(self,"HD7mClip")
			)setweaponstate("loadclip");*/
		}
	loadhand:
		BOJG P 0 A_JumpIfInventory(invoker.actualammo,1,"loadhandloop");
		goto reloaddone;
	loadhandloop:
		BOJG P 4{
			int hnd=min(
				countinv(invoker.actualammo),9,
				27-invoker.weaponstatus[BOSSS_MAG]
			);
			if(hnd<1){
				setweaponstate("reloaddone");
				return;
			}else{
				A_TakeInventory(invoker.actualammo,hnd,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_HAND]=hnd;
				A_StartSound("weapons/pocket",9);
			}
		}
	loadone:
		BOJG P 2 offset(16,50) A_JumpIf(invoker.weaponstatus[BOSSS_HAND]<1,"loadhandnext");
		BOJG P 4 offset(14,46){
			invoker.weaponstatus[BOSSS_HAND]--;
			invoker.weaponstatus[BOSSS_MAG]++;
			A_StartSound("weapons/rifleclick2",8);
		}loop;
	loadhandnext:
		BOJG P 8 offset(16,48){
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()||
				!countinv(invoker.actualammo)	//don't strip clips automatically
			)setweaponstate("reloaddone");
			else A_StartSound("weapons/pocket",9);
		}goto loadhandloop;
	reloaddone:
		BOJG P 1 offset(4,40);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(0,34);
		goto nope;
	unload:
		BOJG P 1 offset(0,34);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(4,40);
		BOJG P 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		BOJG P 4 offset (14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleload",8);
		}
	unloadloop:
		BOJG P 4 offset(3,41){
			if(invoker.weaponstatus[BOSSS_MAG]<1)setweaponstate("unloaddone");
			else{
				A_StartSound("weapons/rifleclick2",8);
				invoker.weaponstatus[BOSSS_MAG]--;
				if(A_JumpIfInventory(invoker.actualammo,0,"null")){
					A_SpawnItemEx(
						invoker.looseammo,cos(pitch)*8,0,height-7-sin(pitch)*8,
						cos(pitch)*cos(angle-40)*1+vel.x,
						cos(pitch)*sin(angle-40)*1+vel.y,
						-sin(pitch)*1+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|
						SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else A_GiveInventory(invoker.actualammo,1);
			}
		}
		BOJG P 2 offset(2,42);
		BOJG P 0{
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()
			)setweaponstate("unloaddone");
		}loop;
	unloaddone:
		BOJG P 2 offset(2,42);
		BOJG P 3 offset(3,41);
		BOJG P 1 offset(4,40) A_StartSound("weapons/rifleclick",8);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(0,34);
		goto ready;

	spawn:
		BOJG ] -1;
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		weaponstatus[BOSSS_CHAMBER]=2;
		weaponstatus[BOSSS_MAG]=27;
		if(!idfa){
			weaponstatus[BOSSS_HEAT]=0;
		}
		if(!owner){
			if(randompick(0,0,1))weaponstatus[0]&=~BOSSF_FRONTRETICLE;
				else weaponstatus[0]|=BOSSF_FRONTRETICLE;
			if(random(0,3))weaponstatus[0]&=~BOSSF_CUSTOMCHAMBER;
				else weaponstatus[0]|=BOSSF_CUSTOMCHAMBER;
			weaponstatus[BOSSS_ZOOM]=20;
			weaponstatus[BOSSS_DROPADJUST]=160;
		}
	}
}

class HDB_Pink:HDBulletActor{
	default{
		pushfactor 0.45;
		mass 26;
		speed 600;
		accuracy 270;
		stamina 570;
		woundhealth 10;
		hdbulletactor.hardness 3;
	}
}