class BossRifleButItsTheWorst:BossRifle{
	default{
		hdweapon.refid "";
		tag "$TAG_WORSTBOSS";
	}

	override string pickupmessage(){
		return "You found a... "..gettag()..". Oh no...";
	}

	override void GunBounce(){
		HDWeapon.GunBounce();
		if(weaponstatus[0]&BOSSF_YEETABLE){
			weaponstatus[BOSSS_GRIME]+=random(-7,3);
			if(weaponstatus[BOSSS_CHAMBER]>2&&!random(0,7))weaponstatus[BOSSS_CHAMBER]-=2;
		}
		else {
			if(!random(0,100)) weaponstatus[BOSSS_GRIME]+=randompick(-1,-1,-1,-1,-1,1);
		}
	}
	action void A_ChamberGrit(int amt,bool onlywhileempty=false){
		bool customchamber=(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER);
		if(customchamber){
			invoker.weaponstatus[BOSSS_GRIME]=0;
			return;
		}
		int ibg=invoker.weaponstatus[BOSSS_GRIME];
		if(!onlywhileempty||invoker.weaponstatus[BOSSS_CHAMBER]<1)ibg+=amt;
		else if(!random(0,4))ibg++;
		invoker.weaponstatus[BOSSS_GRIME]=clamp(ibg,0,100);
		//if(hd_debug)A_Log(string.format("Boss grit level: %i",invoker.weaponstatus[BOSSS_GRIME]));
	}
	override double weaponbulk(){
		return 144;
	}
	override void consolidate(){
		//weaponstatus[BOSSS_GRIME]=random(0,20);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",10);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_GiveInventory("SevenMilAmmo");
	}
	int jamchance(){
		if(weaponstatus[0]&BOSSF_CUSTOMCHAMBER) return 0;
		int jc=
		weaponstatus[BOSSS_GRIME]
		+(weaponstatus[BOSSS_HEAT]>>2)
		+weaponstatus[BOSSS_CHAMBER]
		;
		return jc;
	}
	override string,double getpickupsprite(){return "BOJG[0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("RBRSA3A7",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			sb.drawnum(hpl.countinv("SevenMilAmmo"),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[BOSSS_CHAMBER]) {
			if(!(hdw.weaponstatus[BOSSS_CHAMBER]%2))
				{sb.drawrect(-40,-8,1,2); sb.drawrect(-39,-9,6,4);}
			sb.drawrect(-32,-9,12,4); sb.drawrect(-19,-9,2,4);
		}
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	override string gethelptext(){
		if(weaponstatus[0]&BOSSF_CUSTOMCHAMBER)
			return "\cfMAN IS ONLY SEPARATED FROM THE HEAVENS\nBY THAT WHICH HE WILL NOT GUN.";
		else
			return "You are beyond help.";
	}
	states{
	select0:
		BOJG A 0;
		goto select0bfg;
	deselect0:
		BOJG A 0;
		goto deselect0big;
	ready:
		BOJG A 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;
	fire:
		BOJG A 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG A 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=1;
			A_StartSound("weapons/bronto",CHAN_WEAPON);
			A_StartSound("weapons/bronto",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/bronto",CHAN_WEAPON,CHANF_OVERLAP, volume:0.75, attenuation:ATTN_NONE);
			A_StartSound("weapons/bronto2",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/bronto2",CHAN_WEAPON,CHANF_OVERLAP, volume:0.75, attenuation:ATTN_NONE);
			invoker.owner.Vel3DFromAngle(gunbraced()?45:90,invoker.owner.angle+180,-invoker.owner.pitch);
			//A_AlertMonsters();
			ThinkerIterator Alerter = ThinkerIterator.Create("Actor");
			Actor mo;
			while (mo = Actor(Alerter.Next()))
				if (mo.bismonster) mo.SoundAlert(invoker.owner);

			if(!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)) {
				HDBulletActor.FireBullet(self,"HDB_776",
					aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
					speedfactor:327.000
				);
				A_ChamberGrit(99);
			}
			damagemobj(invoker,self,random(130,170)/(gunbraced()?2:1),"falling");
			A_MuzzleClimb(
				-50,-frandom(50.,130.),
				-50,-frandom(50.,130.)
			);
			A_MuzzleClimb(
				-50,-frandom(50.,130.),
				-50,-frandom(50.,130.),
				wepdot:true
			);
		}
		BOJG U 1 {HDPlayerPawn(invoker.owner).Disarm(invoker.owner);}
		BOJG U 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.0);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG A 1 offset(0,34) A_WeaponBusy();
		BOJG B 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG B 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG B 1 offset(0,34);
		BOJG B 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG B 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG E 1 A_WeaponReady(WRF_NOFIRE);
		BOJG E 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG E 0 A_StartSound("weapons/boltfwd",8);
		BOJG DC 2 A_WeaponReady(WRF_NOFIRE);
		BOJG B 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG E 1 offset(2,36) A_ClearRefire();
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG E 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG E 2 offset(8,60);
		BOJG E 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory("SevenMilAmmo",0,"null")){
					class<actor> whatkind=chm==2?"HDLoose7mm":"HDSpent7mm";
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,"SevenMilAmmo",1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory("SevenMilAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG E 2 offset(7,72);
		BOJG E 2 offset(8,60);
		BOJG E 1 offset(7,52);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG E 1 offset(2,36) A_ClearRefire();
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG E 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG E 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG E 1 offset(7,52);
		BOJG E 1 offset(8,48);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(2,36);
		goto althold;
	jam:
		BOJG A 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG A 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG D 1 offset(4,38);
		BOJG D 2 offset(2,36);
		BOJG D 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG D 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG D 2 offset(4,38);
		BOJG D 3 offset(2,36);
		BOJG A 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG C 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG D 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG D 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG D 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					"HDLoose7mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					"HDSpent7mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG E 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG E 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 1;
		goto nope;
	altreload:
		---- A 1;
		goto nope;
	unload:
		---- A 1;
		goto nope;
	spawn:
		BOJG [ -1;
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		weaponstatus[BOSSS_CHAMBER]=0;
		if(!idfa){
			weaponstatus[BOSSS_HEAT]=0;
		}
		if(!owner){
			if(randompick(0,0,1))weaponstatus[0]&=~BOSSF_FRONTRETICLE;
				else weaponstatus[0]|=BOSSF_FRONTRETICLE;
			weaponstatus[BOSSS_ZOOM]=20;
			weaponstatus[BOSSS_DROPADJUST]=160;
		}
	}
	override void loadoutconfigure(string input){
		int yeet=getloadoutvar(input,"yeetable",1);
		if(!yeet)weaponstatus[0]&=~BOSSF_YEETABLE;
		else if(yeet>0)weaponstatus[0]|=BOSSF_YEETABLE;
	
		int customchamber=getloadoutvar(input,"customchamber",1);
		if(!customchamber)weaponstatus[0]&=~BOSSF_CUSTOMCHAMBER;
		else if(customchamber>0)weaponstatus[0]|=BOSSF_CUSTOMCHAMBER;
	
		int frontreticle=getloadoutvar(input,"frontreticle",1);
		if(!frontreticle)weaponstatus[0]&=~BOSSF_FRONTRETICLE;
		else if(frontreticle>0)weaponstatus[0]|=BOSSF_FRONTRETICLE;

		int bulletdrop=getloadoutvar(input,"bulletdrop",3);
		if(bulletdrop>=0)weaponstatus[BOSSS_DROPADJUST]=clamp(bulletdrop,0,600);

		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>0)weaponstatus[BOSSS_ZOOM]=
			(weaponstatus[0]&BOSSF_FRONTRETICLE)?
			clamp(zoom,12,40):
			clamp(zoom,5,60);
	}
}