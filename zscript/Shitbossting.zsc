// Honestly i'm probably not going to put much work into this.
// It's a meme mod, if it breaks take it as an unintended feature.
// I doubt it will all of this stuff inherets from BossRifle so it'll probably be fine tbh. - [Ted]

// Worst boss rifle.
class BossRifleButItsTheWorst:BossRifle{
	default{
		inventory.pickupMessage "Oh no.";
		hdweapon.refid "";
		tag "Boss Rifle But It's The Worst";
	}
	override void GunBounce(){
		HDWeapon.GunBounce();
		if(weaponstatus[0]&BOSSF_YEETABLE){
			weaponstatus[BOSSS_GRIME]+=random(-7,3);
			if(weaponstatus[BOSSS_CHAMBER]>2&&!random(0,7))weaponstatus[BOSSS_CHAMBER]-=2;
		}
		else {
			if(!random(0,100)) weaponstatus[BOSSS_GRIME]+=randompick(-1,-1,-1,-1,-1,1);
		}
	}
	action void A_ChamberGrit(int amt,bool onlywhileempty=false){
		bool customchamber=(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER);
		if(customchamber){
			invoker.weaponstatus[BOSSS_GRIME]=0;
			return;
		}
		int ibg=invoker.weaponstatus[BOSSS_GRIME];
		if(!onlywhileempty||invoker.weaponstatus[BOSSS_CHAMBER]<1)ibg+=amt;
		else if(!random(0,4))ibg++;
		invoker.weaponstatus[BOSSS_GRIME]=clamp(ibg,0,100);
		//if(hd_debug)A_Log(string.format("Boss grit level: %i",invoker.weaponstatus[BOSSS_GRIME]));
	}
	override double weaponbulk(){
		return 144;
	}
	override void consolidate(){
		//weaponstatus[BOSSS_GRIME]=random(0,20);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",10);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_GiveInventory("SevenMilAmmo");
	}
	int jamchance(){
		if(weaponstatus[0]&BOSSF_CUSTOMCHAMBER) return 0;
		int jc=
		weaponstatus[BOSSS_GRIME]
		+(weaponstatus[BOSSS_HEAT]>>2)
		+weaponstatus[BOSSS_CHAMBER]
		;
		return jc;
	}
	override string,double getpickupsprite(){return "BOJG[0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("RBRSA3A7",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			sb.drawnum(hpl.countinv("SevenMilAmmo"),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[BOSSS_CHAMBER]) {
			if(!(hdw.weaponstatus[BOSSS_CHAMBER]%2))
				{sb.drawrect(-40,-8,1,2); sb.drawrect(-39,-9,6,4);}
			sb.drawrect(-32,-9,12,4); sb.drawrect(-19,-9,2,4);
		}
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	override string gethelptext(){
		if(weaponstatus[0]&BOSSF_CUSTOMCHAMBER)
			return "\cfMAN IS ONLY SEPARATED FROM THE HEAVENS\nBY THAT WHICH HE WILL NOT GUN.";
		else
			return "You are beyond help.";
	}
	states{
	select0:
		BOJG A 0;
		goto select0bfg;
	deselect0:
		BOJG A 0;
		goto deselect0big;
	ready:
		BOJG A 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;
	fire:
		BOJG A 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG A 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=1;
			A_StartSound("weapons/bronto",CHAN_WEAPON);
			A_StartSound("weapons/bronto",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/bronto",CHAN_WEAPON,CHANF_OVERLAP, volume:0.75, attenuation:ATTN_NONE);
			A_StartSound("weapons/bronto2",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("weapons/bronto2",CHAN_WEAPON,CHANF_OVERLAP, volume:0.75, attenuation:ATTN_NONE);
			invoker.owner.Vel3DFromAngle(gunbraced()?45:90,invoker.owner.angle+180,-invoker.owner.pitch);
			//A_AlertMonsters();
			ThinkerIterator Alerter = ThinkerIterator.Create("Actor");
			Actor mo;
			while (mo = Actor(Alerter.Next()))
				if (mo.bismonster) mo.SoundAlert(invoker.owner);

			if(!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)) {
				HDBulletActor.FireBullet(self,"HDB_776",
					aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
					speedfactor:327.000
				);
				A_ChamberGrit(99);
			}
			damagemobj(invoker,self,random(130,170)/(gunbraced()?2:1),"falling");
			A_MuzzleClimb(
				-50,-frandom(50.,130.),
				-50,-frandom(50.,130.)
			);
			A_MuzzleClimb(
				-50,-frandom(50.,130.),
				-50,-frandom(50.,130.),
				wepdot:true
			);
		}
		BOJG U 1 {HDPlayerPawn(invoker.owner).Disarm(invoker.owner);}
		BOJG U 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.0);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG A 1 offset(0,34) A_WeaponBusy();
		BOJG B 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG B 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG B 1 offset(0,34);
		BOJG B 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG B 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG E 1 A_WeaponReady(WRF_NOFIRE);
		BOJG E 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG E 0 A_StartSound("weapons/boltfwd",8);
		BOJG DC 2 A_WeaponReady(WRF_NOFIRE);
		BOJG B 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG E 1 offset(2,36) A_ClearRefire();
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG E 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG E 2 offset(8,60);
		BOJG E 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory("SevenMilAmmo",0,"null")){
					class<actor> whatkind=chm==2?"HDLoose7mm":"HDSpent7mm";
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,"SevenMilAmmo",1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory("SevenMilAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG E 2 offset(7,72);
		BOJG E 2 offset(8,60);
		BOJG E 1 offset(7,52);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG E 1 offset(2,36) A_ClearRefire();
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG E 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG E 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG E 1 offset(7,52);
		BOJG E 1 offset(8,48);
		BOJG E 1 offset(5,42);
		BOJG E 1 offset(3,38);
		BOJG E 1 offset(2,36);
		goto althold;
	jam:
		BOJG A 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG A 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG D 1 offset(4,38);
		BOJG D 2 offset(2,36);
		BOJG D 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG D 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG D 2 offset(4,38);
		BOJG D 3 offset(2,36);
		BOJG A 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG C 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG D 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG D 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG D 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					"HDLoose7mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					"HDSpent7mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG E 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG E 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 1;
		goto nope;
	altreload:
		---- A 1;
		goto nope;
	unload:
		---- A 1;
		goto nope;
	spawn:
		BOJG [ -1;
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		weaponstatus[BOSSS_CHAMBER]=0;
		if(!idfa){
			weaponstatus[BOSSS_HEAT]=0;
		}
		if(!owner){
			if(randompick(0,0,1))weaponstatus[0]&=~BOSSF_FRONTRETICLE;
				else weaponstatus[0]|=BOSSF_FRONTRETICLE;
			weaponstatus[BOSSS_ZOOM]=20;
			weaponstatus[BOSSS_DROPADJUST]=160;
		}
	}
	override void loadoutconfigure(string input){
		int yeet=getloadoutvar(input,"yeetable",1);
		if(!yeet)weaponstatus[0]&=~BOSSF_YEETABLE;
		else if(yeet>0)weaponstatus[0]|=BOSSF_YEETABLE;
	
		int customchamber=getloadoutvar(input,"customchamber",1);
		if(!customchamber)weaponstatus[0]&=~BOSSF_CUSTOMCHAMBER;
		else if(customchamber>0)weaponstatus[0]|=BOSSF_CUSTOMCHAMBER;
	
		int frontreticle=getloadoutvar(input,"frontreticle",1);
		if(!frontreticle)weaponstatus[0]&=~BOSSF_FRONTRETICLE;
		else if(frontreticle>0)weaponstatus[0]|=BOSSF_FRONTRETICLE;

		int bulletdrop=getloadoutvar(input,"bulletdrop",3);
		if(bulletdrop>=0)weaponstatus[BOSSS_DROPADJUST]=clamp(bulletdrop,0,600);

		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>0)weaponstatus[BOSSS_ZOOM]=
			(weaponstatus[0]&BOSSF_FRONTRETICLE)?
			clamp(zoom,12,40):
			clamp(zoom,5,60);
	}
}

// 9mm Boss Rifle
class BossRifleButIts9mm:BossRifle{
	default{
		tag "Boss Rifle (9mm)";
		hdweapon.refid "";
	}
	class<Inventory> nineclip;
	override void postbeginplay(){
		super.postbeginplay();
		string lol = "HD9mClip";
		nineclip = lol;
	}
	override double weaponbulk(){
		return 144+weaponstatus[BOSSS_MAG]*ENC_9_LOADED;
	}
	override void DropOneAmmo(int amt){
		if(owner){
			if(owner.countinv("HDPistolAmmo"))owner.A_DropInventory("HDPistolAmmo",10);
			//else owner.A_DropInventory("HD7mClip",1);
		}
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Work bolt\n"
		..WEPHELP_RELOADRELOAD
		..WEPHELP_ZOOM.."+"..WEPHELP_FIREMODE.."  Zoom\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_USE.."  Bullet drop\n"
		..WEPHELP_ALTFIRE.."+"..WEPHELP_UNLOAD.."  Unload chamber/Clean rifle\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDPistolAmmo",11);
	}
	override string,double getpickupsprite(){return "BOJGY0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			if (nineclip) {
				sb.drawimage("9CLPA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
				sb.drawnum(hpl.countinv(nineclip),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
			}
			else {
				sb.drawimage("PRNDA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
				sb.drawnum(hpl.countinv("HDPistolAmmo"),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
			}
		}
		sb.drawwepnum(hdw.weaponstatus[BOSSS_MAG],10);
		sb.drawwepcounter(hdw.weaponstatus[BOSSS_CHAMBER],
			-16,-10,"blank","RBRSA1A5","RBRSA3A7","RBRSA4A6"
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		super.InitializeWepStats(idfa);
	}
	states{
	select0:
		BOJG F 0;
		goto select0bfg;
	deselect0:
		BOJG F 0;
		goto deselect0big;

	ready:
		BOJG F 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 {
			//if (invoker.nineclip) A_MagManager(invoker.nineclip);
			//else A_MagManager("HDBattery");
			A_MagManager("HD9mClip");
		}
		goto ready;
	fire:
		BOJG F 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG F 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=1;
			A_StartSound("weapons/9mmboss",CHAN_WEAPON,CHANF_OVERLAP,
				pitch:!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?1.1:1.
			);
			A_AlertMonsters();

			HDBulletActor.FireBullet(self,"HDB_9",
				aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
				speedfactor:1.1*(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?0.99:1.07
			);
			A_MuzzleClimb(
				0,0,
				-frandom(0.06,0.12),-frandom(0.09,0.15),
				-frandom(0.12,0.2),-frandom(0.18,0.3),
				-frandom(0.12,0.2),-frandom(0.18,0.3)
			);
		}
		BOJG V 1;
		BOJG V 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.98);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG F 1 offset(0,34) A_WeaponBusy();
		BOJG G 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG G 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG G 1 offset(0,34);
		BOJG G 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG G 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG J 1 A_WeaponReady(WRF_NOFIRE);
		BOJG J 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG J 0 A_StartSound("weapons/boltfwd",8);
		BOJG IH 2 A_WeaponReady(WRF_NOFIRE);
		BOJG G 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG J 1 offset(2,36) A_ClearRefire();
		BOJG J 1 offset(3,38);
		BOJG J 1 offset(5,42);
		BOJG J 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG J 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG J 2 offset(8,60);
		BOJG J 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory("HDPistolAmmo",0,"null")){
					class<actor> whatkind=chm==2?"HDLoose9mm":"HDSpent9mm";
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,"HDPistolAmmo",1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory("HDPistolAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG J 2 offset(7,72);
		BOJG J 2 offset(8,60);
		BOJG J 1 offset(7,52);
		BOJG J 1 offset(5,42);
		BOJG J 1 offset(3,38);
		BOJG J 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG J 1 offset(2,36) A_ClearRefire();
		BOJG J 1 offset(3,38);
		BOJG J 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG J 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG J 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG J 1 offset(7,52);
		BOJG J 1 offset(8,48);
		BOJG J 1 offset(5,42);
		BOJG J 1 offset(3,38);
		BOJG J 1 offset(2,36);
		goto althold;
	jam:
		BOJG F 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG F 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG I 1 offset(4,38);
		BOJG I 2 offset(2,36);
		BOJG I 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG I 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG I 2 offset(4,38);
		BOJG I 3 offset(2,36);
		BOJG F 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG H 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG I 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG I 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG I 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					"HDLoose9mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					"HDSpent9mm",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			if(invoker.weaponstatus[BOSSS_MAG]>0){  
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
				invoker.weaponstatus[BOSSS_MAG]--;
			}else invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG J 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG J 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 0{invoker.weaponstatus[0]&=~BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	altreload:
		---- A 0{invoker.weaponstatus[0]|=BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	reloadstart:
		BOJG F 1 offset(0,34);
		BOJG F 1 offset(2,36);
		BOJG F 1 offset(4,40);
		BOJG F 2 offset(8,42){
			A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,0.9,pitch:0.95);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG F 4 offset(14,46){
			A_StartSound("weapons/rifleload",8,CHANF_OVERLAP);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG F 0{
			int mg=invoker.weaponstatus[BOSSS_MAG];
			if(mg==10)setweaponstate("reloaddone");
			else if(invoker.weaponstatus[0]&BOSSF_DONTUSECLIPS)setweaponstate("loadhand");
			else if(invoker.nineclip &&
				(
					mg<1
					||!countinv("HDPistolAmmo")
				)&&!HDMagAmmo.NothingLoaded(self,invoker.nineclip)
			)setweaponstate("loadclip");
		}
	loadhand:
		BOJG F 0 A_JumpIfInventory("HDPistolAmmo",1,"loadhandloop");
		goto reloaddone;
	loadhandloop:
		BOJG F 4{
			int hnd=min(
				countinv("HDPistolAmmo"),4,
				10-invoker.weaponstatus[BOSSS_MAG]
			);
			if(hnd<1){
				setweaponstate("reloaddone");
				return;
			}else{
				A_TakeInventory("HDPistolAmmo",hnd,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_HAND]=hnd;
				A_StartSound("weapons/pocket",9);
			}
		}
	loadone:
		BOJG F 2 offset(16,50) A_JumpIf(invoker.weaponstatus[BOSSS_HAND]<1,"loadhandnext");
		BOJG F 4 offset(14,46){
			invoker.weaponstatus[BOSSS_HAND]--;
			invoker.weaponstatus[BOSSS_MAG]++;
			A_StartSound("weapons/rifleclick2",8);
		}loop;
	loadhandnext:
		BOJG F 8 offset(16,48){
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()||
				!countinv("HDPistolAmmo")	//don't strip clips automatically
			)setweaponstate("reloaddone");
			else A_StartSound("weapons/pocket",9);
		}goto loadhandloop;
	loadclip:
		BOJG F 0 A_JumpIf(invoker.weaponstatus[BOSSS_MAG]>9,"reloaddone");
		BOJG F 3 offset(16,50){
			let ccc=hdmagammo(findinventory(invoker.nineclip));
			if(ccc){
				//find the last mag that has anything in it and load from that
				bool fullmag=false;
				int magindex=-1;
				for(int i=ccc.mags.size()-1;i>=0;i--){
					if(ccc.mags[i]>=10)fullmag=true;
					if(magindex<0&&ccc.mags[i]>0)magindex=i;
					if(fullmag&&magindex>0)break;
				}
				if(magindex<0){
					setweaponstate("reloaddone");
					return;
				}

				//load the whole clip at once if possible
				if(
					fullmag
					&&invoker.weaponstatus[BOSSS_MAG]<1
				){
					setweaponstate("loadwholeclip");
					return;
				}

				//strip one round and load it
				A_StartSound("weapons/rifleclick2",CHAN_WEAPONBODY);
				invoker.weaponstatus[BOSSS_MAG]++;
				ccc.mags[magindex]--;
			}
		}
		BOJG F 5 offset(16,52) A_JumpIf(
			PressingReload()||
			PressingFire()||
			PressingAltFire()||
			PressingZoom()
		,"reloaddone");
		loop;
	loadwholeclip:
		BOJG F 4 offset(16,50) A_StartSound("weapons/rifleclick2",8);
		BOJG FFF 3 offset(17,52) A_StartSound("weapons/rifleclick2",8,pitch:1.01);
		BOJG FFF 2 offset(16,50) A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,pitch:1.02);
		BOJG FFF 1 offset(15,48) A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,pitch:1.02);
		BOJG F 2 offset(14,46){
			A_StartSound("weapons/rifleclick",CHAN_WEAPONBODY);
			let ccc=hdmagammo(findinventory(invoker.nineclip));
			if(ccc){
				invoker.weaponstatus[BOSSS_MAG]=ccc.TakeMag(true);
				if(pressingreload()){
					ccc.addamag(0);
					A_SetTics(10);
					A_StartSound("weapons/pocket",CHAN_POCKETS);
				}else HDMagAmmo.SpawnMag(self,invoker.nineclip,0);
			}
		}goto reloaddone;
	reloaddone:
		BOJG F 1 offset(4,40);
		BOJG F 1 offset(2,36);
		BOJG F 1 offset(0,34);
		goto nope;
	unload:
		BOJG F 1 offset(0,34);
		BOJG F 1 offset(2,36);
		BOJG F 1 offset(4,40);
		BOJG F 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		BOJG F 4 offset (14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleload",8);
		}
	unloadloop:
		BOJG F 4 offset(3,41){
			if(invoker.weaponstatus[BOSSS_MAG]<1)setweaponstate("unloaddone");
			else{
				A_StartSound("weapons/rifleclick2",8);
				invoker.weaponstatus[BOSSS_MAG]--;
				if(A_JumpIfInventory("HDPistolAmmo",0,"null")){
					A_SpawnItemEx(
						"HDLoose9mm",cos(pitch)*8,0,height-7-sin(pitch)*8,
						cos(pitch)*cos(angle-40)*1+vel.x,
						cos(pitch)*sin(angle-40)*1+vel.y,
						-sin(pitch)*1+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|
						SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else A_GiveInventory("HDPistolAmmo",1);
			}
		}
		BOJG F 2 offset(2,42);
		BOJG F 0{
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()
			)setweaponstate("unloaddone");
		}loop;
	unloaddone:
		BOJG F 2 offset(2,42);
		BOJG F 3 offset(3,41);
		BOJG F 1 offset(4,40) A_StartSound("weapons/rifleclick",8);
		BOJG F 1 offset(2,36);
		BOJG F 1 offset(0,34);
		goto ready;

	spawn:
		BOJG Y -1;
	}
}

// 4mm Boss Rifle
class BossRifleButIts4mm:BossRifle{
	default{
		tag "Boss Rifle (4mm)";
		hdweapon.refid "";
	}
	override double weaponbulk(){
		return 144+weaponstatus[BOSSS_MAG]*ENC_426_LOADED;
	}
	override void DropOneAmmo(int amt){
		if(owner){
			if(owner.countinv("FourMilAmmo"))owner.A_DropInventory("FourMilAmmo",10);
			//else owner.A_DropInventory("HD7mClip",1);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory("FourMilAmmo",11);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Work bolt\n"
		..WEPHELP_RELOADRELOAD
		..WEPHELP_ZOOM.."+"..WEPHELP_FIREMODE.."  Zoom\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_USE.."  Bullet drop\n"
		..WEPHELP_ALTFIRE.."+"..WEPHELP_UNLOAD.."  Unload chamber/Clean rifle\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override string,double getpickupsprite(){return "BOJGZ0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("RCLSA3A7",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			sb.drawnum(hpl.countinv("FourMilAmmo"),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[BOSSS_MAG],10);
		sb.drawwepcounter(hdw.weaponstatus[BOSSS_CHAMBER],
			-16,-10,"blank","RBRSA1A5","RBRSA3A7","RBRSA4A6"
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		super.InitializeWepStats(idfa);
	}
	states{
	select0:
		BOJG K 0;
		goto select0bfg;
	deselect0:
		BOJG K 0;
		goto deselect0big;

	ready:
		BOJG K 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;
	fire:
		BOJG K 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG K 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=0;
			A_StartSound("weapons/4mmboss",CHAN_WEAPON,CHANF_OVERLAP,
				pitch:!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?1.1:1.
			);
			A_AlertMonsters();

			HDBulletActor.FireBullet(self,"HDB_426",
				aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
				speedfactor:(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?0.99:1.07
			);
			A_MuzzleClimb(
				0,0,
				-frandom(0.15,0.3),-frandom(0.3,0.5),
				-frandom(0.3,0.6),-frandom(0.6,1.1),
				-frandom(0.3,0.6),-frandom(0.6,1.1)
			);
		}
		BOJG W 1;
		BOJG W 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.96);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG K 1 offset(0,34) A_WeaponBusy();
		BOJG L 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG L 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG L 1 offset(0,34);
		BOJG L 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG L 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG O 1 A_WeaponReady(WRF_NOFIRE);
		BOJG O 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG O 0 A_StartSound("weapons/boltfwd",8);
		BOJG NM 2 A_WeaponReady(WRF_NOFIRE);
		BOJG L 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG O 1 offset(2,36) A_ClearRefire();
		BOJG O 1 offset(3,38);
		BOJG O 1 offset(5,42);
		BOJG O 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG O 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG O 2 offset(8,60);
		BOJG O 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory("FourMilAmmo",0,"null")){
					if (chm==2){
						actor rrr=spawn("ZM66DroppedRound",pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
						rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
					}
				}else HDF.Give(self,"FourMilAmmo",1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory("FourMilAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG O 2 offset(7,72);
		BOJG O 2 offset(8,60);
		BOJG O 1 offset(7,52);
		BOJG O 1 offset(5,42);
		BOJG O 1 offset(3,38);
		BOJG O 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG O 1 offset(2,36) A_ClearRefire();
		BOJG O 1 offset(3,38);
		BOJG O 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG O 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG O 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG O 1 offset(7,52);
		BOJG O 1 offset(8,48);
		BOJG O 1 offset(5,42);
		BOJG O 1 offset(3,38);
		BOJG O 1 offset(2,36);
		goto althold;
	jam:
		BOJG K 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG K 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG N 1 offset(4,38);
		BOJG N 2 offset(2,36);
		BOJG N 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG N 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG N 2 offset(4,38);
		BOJG N 3 offset(2,36);
		BOJG K 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG M 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG N 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG N 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG N 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					"ZM66DroppedRound",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			if(invoker.weaponstatus[BOSSS_MAG]>0){  
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
				invoker.weaponstatus[BOSSS_MAG]--;
			}else invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG O 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG O 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 0{invoker.weaponstatus[0]&=~BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	altreload:
		---- A 0{invoker.weaponstatus[0]|=BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	reloadstart:
		BOJG K 1 offset(0,34);
		BOJG K 1 offset(2,36);
		BOJG K 1 offset(4,40);
		BOJG K 2 offset(8,42){
			A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,0.9,pitch:0.95);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG K 4 offset(14,46){
			A_StartSound("weapons/rifleload",8,CHANF_OVERLAP);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG K 0{
			int mg=invoker.weaponstatus[BOSSS_MAG];
			if(mg==10)setweaponstate("reloaddone");
			else if(invoker.weaponstatus[0]&BOSSF_DONTUSECLIPS)setweaponstate("loadhand");
			/*else if(
				(
					mg<1
					||!countinv("SevenMilAmmo")
				)&&!HDMagAmmo.NothingLoaded(self,"HD7mClip")
			)setweaponstate("loadclip");*/
		}
	loadhand:
		BOJG K 0 A_JumpIfInventory("FourMilAmmo",1,"loadhandloop");
		goto reloaddone;
	loadhandloop:
		BOJG K 4{
			int hnd=min(
				countinv("FourMilAmmo"),6,
				10-invoker.weaponstatus[BOSSS_MAG]
			);
			if(hnd<1){
				setweaponstate("reloaddone");
				return;
			}else{
				A_TakeInventory("FourMilAmmo",hnd,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_HAND]=hnd;
				A_StartSound("weapons/pocket",9);
			}
		}
	loadone:
		BOJG K 2 offset(16,50) A_JumpIf(invoker.weaponstatus[BOSSS_HAND]<1,"loadhandnext");
		BOJG K 4 offset(14,46){
			invoker.weaponstatus[BOSSS_HAND]--;
			if(!random(0,40)){
				invoker.owner.A_StartSound("weapons/bigcrack",8,CHANF_OVERLAP);
				invoker.owner.A_SpawnItemEx("WallChunk",12,0,invoker.owner.height-12,4,frandom(-2,2),frandom(2,4));
			}
			else {
				invoker.weaponstatus[BOSSS_MAG]++;
				A_StartSound("weapons/rifleclick2",8);
			}
		}loop;
	loadhandnext:
		BOJG K 8 offset(16,48){
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()||
				!countinv("FourMilAmmo")	//don't strip clips automatically
			)setweaponstate("reloaddone");
			else A_StartSound("weapons/pocket",9);
		}goto loadhandloop;
	reloaddone:
		BOJG K 1 offset(4,40);
		BOJG K 1 offset(2,36);
		BOJG K 1 offset(0,34);
		goto nope;
	unload:
		BOJG K 1 offset(0,34);
		BOJG K 1 offset(2,36);
		BOJG K 1 offset(4,40);
		BOJG K 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		BOJG K 4 offset (14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleload",8);
		}
	unloadloop:
		BOJG K 4 offset(3,41){
			if(invoker.weaponstatus[BOSSS_MAG]<1)setweaponstate("unloaddone");
			else{
				A_StartSound("weapons/rifleclick2",8);
				invoker.weaponstatus[BOSSS_MAG]--;
				if(A_JumpIfInventory("FourMilAmmo",0,"null")){
					A_SpawnItemEx(
						"ZM66DroppedRound",cos(pitch)*8,0,height-7-sin(pitch)*8,
						cos(pitch)*cos(angle-40)*1+vel.x,
						cos(pitch)*sin(angle-40)*1+vel.y,
						-sin(pitch)*1+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|
						SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else A_GiveInventory("FourMilAmmo",1);
			}
		}
		BOJG K 2 offset(2,42);
		BOJG K 0{
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()
			)setweaponstate("unloaddone");
		}loop;
	unloaddone:
		BOJG K 2 offset(2,42);
		BOJG K 3 offset(3,41);
		BOJG K 1 offset(4,40) A_StartSound("weapons/rifleclick",8);
		BOJG K 1 offset(2,36);
		BOJG K 1 offset(0,34);
		goto ready;

	spawn:
		BOJG Z -1;
	}
}

// Hexa's Personal Rifle
class BossRifleButItsFuckingPink:BossRifle{
	default{
		inventory.pickupMessage "You got HexaDoken's personal rifle!";
		tag "HexaDoken's Personal Boss Rifle";
		hdweapon.refid "";
	}
	class<Inventory> lrammo, actualammo;
	class<HDDebris> looseammo, spentammo;
	override void postbeginplay(){
		super.postbeginplay();
		string lol = "HD5MM_Ammo"; lrammo = lol;
		lol = "HDSpent5mmMR"; spentammo = lol;
		if (lrammo) {
			actualammo = lrammo; 
			looseammo = "HDLoose5mmMR";
		}
		else {
			actualammo = "HDPistolAmmo";
			looseammo = "HDLoose9mm";
			spentammo = "HDSpent9mm";
		}
	}
	override double weaponbulk(){
		return 144+weaponstatus[BOSSS_MAG]*ENC_9_LOADED*0.05;
	}
	override void DropOneAmmo(int amt){
		if(owner){
			if(owner.countinv(actualammo))owner.A_DropInventory(actualammo,10);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory(actualammo,28);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Work bolt\n"
		..WEPHELP_RELOADRELOAD
		..WEPHELP_ZOOM.."+"..WEPHELP_FIREMODE.."  Zoom\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_USE.."  Bullet drop\n"
		..WEPHELP_ALTFIRE.."+"..WEPHELP_UNLOAD.."  Unload chamber/Clean rifle\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override string,double getpickupsprite(){return "BOJG]0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			if (lrammo)
				sb.drawimage("5MMZA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			else
				sb.drawimage("PRNDA0",(-54,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(2.1,2.1));
			sb.drawnum(hpl.countinv(actualammo),-51,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[BOSSS_MAG],27);
		sb.drawwepcounter(hdw.weaponstatus[BOSSS_CHAMBER],
			-16,-10,"blank","RBRSA1A5","RBRSA3A7","RBRSA4A6"
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[BOSSS_DROPADJUST]*0.1),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	states{
	select0:
		BOJG P 0;
		goto select0bfg;
	deselect0:
		BOJG P 0;
		goto deselect0big;

	ready:
		BOJG P 1{
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(BOSSS_DROPADJUST,0,600,BT_USE);
				}else if(invoker.weaponstatus[0]&BOSSF_FRONTRETICLE)A_ZoomAdjust(BOSSS_ZOOM,12,40);
				else A_ZoomAdjust(BOSSS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("HDBattery");
		goto ready;
	fire:
		BOJG P 1 A_JumpIf(invoker.weaponstatus[BOSSS_CHAMBER]==2,"shoot");
		goto ready;
	shoot:
		BOJG P 1{
			A_Gunflash();
			invoker.weaponstatus[BOSSS_CHAMBER]=1;
			A_StartSound("weapons/pinkboss",CHAN_WEAPON,CHANF_OVERLAP,
				pitch:!(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?1.1:1.
			);
			A_AlertMonsters();

			HDBulletActor.FireBullet(self,"HDB_Pink",
				aimoffy:(-1./600.)*invoker.weaponstatus[BOSSS_DROPADJUST],
				speedfactor:(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)?0.99:1.07
			);
			A_MuzzleClimb(
				0,0,
				-frandom(0.03,0.06),-frandom(0.04,0.08),
				-frandom(0.06,0.1),-frandom(0.09,0.15),
				-frandom(0.06,0.1),-frandom(0.09,0.15)
			);
		}
		BOJG X 1;
		BOJG X 1 A_JumpIf(gunbraced(),"ready");
		goto ready;
	flash:
		BARF A 1 bright{
			A_Light1();
			HDFlashAlpha(-96);
			A_ZoomRecoil(0.99);
			A_ChamberGrit(randompick(0,0,0,0,0,1,1,1,1,-1));
		}
		TNT1 A 0 A_Light0();
		stop;
	altfire:
		BOJG P 1 offset(0,34) A_WeaponBusy();
		BOJG Q 2 offset(2,36) A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG Q 1 offset(4,38){
			if(invoker.weaponstatus[BOSSS_CHAMBER]>2)setweaponstate("jamderp");
		}
		BOJG Q 1 offset(0,34);
		BOJG Q 0 A_ChamberGrit(randompick(0,0,0,0,-1,1,2),true);
		BOJG Q 0 A_Refire("chamber");
		goto ready;
	althold:
		BOJG T 1 A_WeaponReady(WRF_NOFIRE);
		BOJG T 1{
			A_ClearRefire();
			bool eww=invoker.weaponstatus[BOSSS_GRIME]>10;
			bool chempty=invoker.weaponstatus[BOSSS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdclean");
				}else{
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					!chempty
				){
					invoker.weaponstatus[0]|=BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}else if(
					eww
				){
					return resolvestate("altholdclean");
				}else if(
					countinv("SevenMilAmmo")
				){
					invoker.weaponstatus[0]&=~BOSSF_UNLOADONLY;
					return resolvestate("loadchamber");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		BOJG T 0 A_StartSound("weapons/boltfwd",8);
		BOJG SR 2 A_WeaponReady(WRF_NOFIRE);
		BOJG Q 3 offset(2,36){
			A_WeaponReady(WRF_NOFIRE);
			if(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER)A_SetTics(1);
		}
		goto ready;
	loadchamber:
		BOJG T 1 offset(2,36) A_ClearRefire();
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG T 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		BOJG T 2 offset(8,60);
		BOJG T 2 offset(7,72);
		TNT1 A 18 A_StartSound("weapons/pocket",9);
		TNT1 A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&BOSSF_UNLOADONLY){
				int chm=invoker.weaponstatus[BOSSS_CHAMBER];
				invoker.weaponstatus[BOSSS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory(invoker.actualammo,0,"null")){
					class<actor> whatkind=chm==2?invoker.looseammo:invoker.spentammo;
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,invoker.actualammo,1);
				A_ChamberGrit(randompick(0,0,0,0,-1,1),true);
			}else{
				A_TakeInventory(invoker.actualammo,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
			}
		} 
		BOJG T 2 offset(7,72);
		BOJG T 2 offset(8,60);
		BOJG T 1 offset(7,52);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(3,35);
		goto althold;
	altholdclean:
		BOJG T 1 offset(2,36) A_ClearRefire();
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(5,42) A_Log("Looking inside that chamber...",true);
		BOJG T 1 offset(8,48) A_StartSound("weapons/pocket",9);
		BOJG T 1 offset(7,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		TNT1 A 3 A_StartSound("weapons/pocket",10);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 3 A_StartSound("weapons/pocket",9);
		TNT1 AAAA 4 A_MuzzleClimb(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
		TNT1 A 40{
			A_StartSound("weapons/pocket",9);
			int amt=invoker.weaponstatus[BOSSS_GRIME];
			string amts="There doesn't seem to be much. ";
			if(amt>40)amts="What the FUCK. ";
			else if(amt>30)amts="About time - this gun is barely functional. ";
			else if(amt>20)amts="This is starting to gum up badly. ";
			else if(amt>10)amts="It can use some cleaning. ";

			static const string cleanverbs[]={"extract","scrape off","wipe away","carefully remove","dump out","pick out","blow off","shake out","scrub off","fish out"};
			static const string contaminants[]={"some dust","a lot of dust","a bit of powder residue","a disturbing amount of powder residue","some excess grease","a layer of soot","some iron filings","a bit of hair","an eyelash","a patch of dried blood","a bit of rust","a crumb","a dead insect","ashes","some loose bits of skin","a sticky fluid of some sort","wow some fucking *gunk*","a booger","trace fecal matter","yet even more of that anonymous grey debris that all those bullet impacts make","a dollop of strawberry jam","the dried husk of a pinto bean with residual hog components","a tiny cancerous nodule of Second Flesh","some crystalline buildup of congealed Frag","a nesting queen space ant","a single modern-day transistor","a tiny Boss rifle (also jammed)","a colourless film of darkness made visible"};
			static const string actionparts[]={"bolt carrier","main extractor","auxiliary extractor","cam pin","bolt head","striker","firing pin spring","ejector slot","striker spring","ejector spring"};
			for(int i=amt;i>0;i-=random(8,16))amts.appendformat("You %s %s from the %s. ",
				cleanverbs[random(0,cleanverbs.size()-1)],
				contaminants[random(0,random(0,contaminants.size()-1))],
				actionparts[random(0,random((actionparts.size()>>1),actionparts.size()-1))]
			);
			amts.appendformat("\n");

			amt=randompick(-3,-5,-5,-random(8,16));

			A_ChamberGrit(amt,true);
			amt=invoker.weaponstatus[BOSSS_GRIME];
			if(amt>40)amts.appendformat("You barely scrape the surface of this all-encrusting abomination.");
			else if(amt>30)amts.appendformat("The gun will need a lot more work than this before it can be deployed again.");
			else if(amt>20)amts.appendformat("You might get a few shots out of it now.");
			else if(amt>10)amts.appendformat("It's better, but still not good.");
			else amts.appendformat("Good to go.");
			A_Log(amts,true);
		}
		BOJG T 1 offset(7,52);
		BOJG T 1 offset(8,48);
		BOJG T 1 offset(5,42);
		BOJG T 1 offset(3,38);
		BOJG T 1 offset(2,36);
		goto althold;
	jam:
		BOJG P 0{
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm<1)setweaponstate("chamber");
			else if(chm<3)invoker.weaponstatus[BOSSS_CHAMBER]+=2;
		}
	jamderp:
		BOJG P 0 A_StartSound("weapons/rifleclick",8,CHANF_OVERLAP);
		BOJG S 1 offset(4,38);
		BOJG S 2 offset(2,36);
		BOJG S 2 offset(4,38)A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
		BOJG S 3 offset(2,36){
			A_MuzzleClimb(frandom(-0.5,0.6),frandom(-0.3,0.6));
			if(random(0,invoker.jamchance())<12){
				setweaponstate("chamber");
				if(invoker.weaponstatus[BOSSS_CHAMBER]>2)  
					invoker.weaponstatus[BOSSS_CHAMBER]-=2;
			}
		}
		BOJG S 2 offset(4,38);
		BOJG S 3 offset(2,36);
		BOJG P 0 A_Refire("jamderp");
		goto ready;
	chamber:
		BOJG R 2 offset(4,38){
			if(
				random(0,max(2,invoker.weaponstatus[BOSSS_GRIME]>>3))
				&&invoker.weaponstatus[BOSSS_CHAMBER]>2
			){
				invoker.weaponstatus[BOSSS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
				setweaponstate("jamderp");
			}else A_StartSound("weapons/boltback",8);
		}
		BOJG S 2 offset(6,42)A_JumpIf(invoker.weaponstatus[0]&BOSSF_CUSTOMCHAMBER,1);
		BOJG S 1 offset(6,42){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
			int jamch=invoker.jamchance();
			if(hd_debug)A_Log("jam chance: "..jamch);
			if(random(0,100)<jamch)setweaponstate("jam");
		}
		BOJG S 2 offset(6,42){
			//eject
			int chm=invoker.weaponstatus[BOSSS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					invoker.looseammo,cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					invoker.spentammo,cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			if(invoker.weaponstatus[BOSSS_MAG]>0){  
				invoker.weaponstatus[BOSSS_CHAMBER]=2;
				invoker.weaponstatus[BOSSS_MAG]--;
			}else invoker.weaponstatus[BOSSS_CHAMBER]=0;
		}
		BOJG T 1 offset(6,42) A_WeaponReady(WRF_NOFIRE);
		BOJG T 0 A_Refire("althold");
		goto altholdend;
	reload:
		---- A 0{invoker.weaponstatus[0]&=~BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	altreload:
		---- A 0{invoker.weaponstatus[0]|=BOSSF_DONTUSECLIPS;}
		goto reloadstart;
	reloadstart:
		BOJG P 1 offset(0,34);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(4,40);
		BOJG P 2 offset(8,42){
			A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP,0.9,pitch:0.95);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG P 4 offset(14,46){
			A_StartSound("weapons/rifleload",8,CHANF_OVERLAP);
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		BOJG P 0{
			int mg=invoker.weaponstatus[BOSSS_MAG];
			if(mg==27)setweaponstate("reloaddone");
			else if(invoker.weaponstatus[0]&BOSSF_DONTUSECLIPS)setweaponstate("loadhand");
			/*else if(
				(
					mg<1
					||!countinv("SevenMilAmmo")
				)&&!HDMagAmmo.NothingLoaded(self,"HD7mClip")
			)setweaponstate("loadclip");*/
		}
	loadhand:
		BOJG P 0 A_JumpIfInventory(invoker.actualammo,1,"loadhandloop");
		goto reloaddone;
	loadhandloop:
		BOJG P 4{
			int hnd=min(
				countinv(invoker.actualammo),9,
				27-invoker.weaponstatus[BOSSS_MAG]
			);
			if(hnd<1){
				setweaponstate("reloaddone");
				return;
			}else{
				A_TakeInventory(invoker.actualammo,hnd,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BOSSS_HAND]=hnd;
				A_StartSound("weapons/pocket",9);
			}
		}
	loadone:
		BOJG P 2 offset(16,50) A_JumpIf(invoker.weaponstatus[BOSSS_HAND]<1,"loadhandnext");
		BOJG P 4 offset(14,46){
			invoker.weaponstatus[BOSSS_HAND]--;
			invoker.weaponstatus[BOSSS_MAG]++;
			A_StartSound("weapons/rifleclick2",8);
		}loop;
	loadhandnext:
		BOJG P 8 offset(16,48){
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()||
				!countinv(invoker.actualammo)	//don't strip clips automatically
			)setweaponstate("reloaddone");
			else A_StartSound("weapons/pocket",9);
		}goto loadhandloop;
	reloaddone:
		BOJG P 1 offset(4,40);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(0,34);
		goto nope;
	unload:
		BOJG P 1 offset(0,34);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(4,40);
		BOJG P 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		BOJG P 4 offset (14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleload",8);
		}
	unloadloop:
		BOJG P 4 offset(3,41){
			if(invoker.weaponstatus[BOSSS_MAG]<1)setweaponstate("unloaddone");
			else{
				A_StartSound("weapons/rifleclick2",8);
				invoker.weaponstatus[BOSSS_MAG]--;
				if(A_JumpIfInventory(invoker.actualammo,0,"null")){
					A_SpawnItemEx(
						invoker.looseammo,cos(pitch)*8,0,height-7-sin(pitch)*8,
						cos(pitch)*cos(angle-40)*1+vel.x,
						cos(pitch)*sin(angle-40)*1+vel.y,
						-sin(pitch)*1+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|
						SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else A_GiveInventory(invoker.actualammo,1);
			}
		}
		BOJG P 2 offset(2,42);
		BOJG P 0{
			if(
				PressingReload()||
				PressingFire()||
				PressingAltFire()||
				PressingZoom()
			)setweaponstate("unloaddone");
		}loop;
	unloaddone:
		BOJG P 2 offset(2,42);
		BOJG P 3 offset(3,41);
		BOJG P 1 offset(4,40) A_StartSound("weapons/rifleclick",8);
		BOJG P 1 offset(2,36);
		BOJG P 1 offset(0,34);
		goto ready;

	spawn:
		BOJG ] -1;
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337; //UaS sling compatbility
		weaponstatus[BOSSS_CHAMBER]=2;
		weaponstatus[BOSSS_MAG]=27;
		if(!idfa){
			weaponstatus[BOSSS_HEAT]=0;
		}
		if(!owner){
			if(randompick(0,0,1))weaponstatus[0]&=~BOSSF_FRONTRETICLE;
				else weaponstatus[0]|=BOSSF_FRONTRETICLE;
			if(random(0,3))weaponstatus[0]&=~BOSSF_CUSTOMCHAMBER;
				else weaponstatus[0]|=BOSSF_CUSTOMCHAMBER;
			weaponstatus[BOSSS_ZOOM]=20;
			weaponstatus[BOSSS_DROPADJUST]=160;
		}
	}
}

class HDLoose5mmMR:HDDebris{
	override void postbeginplay(){
		HDDebris.postbeginplay();
	}
	default{
		bouncesound "misc/casing3";scale 0.55; bouncefactor 0.5;
	}
	states{
	spawn:
		5MMR Z 2 nodelay{
			A_SetRoll(roll+45,SPF_INTERPOLATE);
		}loop;
	death:
		TNT1 A 1{
			string lol = "HD5mm_Ammo";
			Class<Inventory> b = lol;
			if (b) {
				actor a=spawn(b,self.pos,ALLOW_REPLACE);
				a.roll=self.roll;a.vel=self.vel;
			}
		}stop;
	}
}

class HDShitbostHandler : StaticEventHandler {
	override void WorldThingSpawned(WorldEvent e) {
		if (e.Thing && e.Thing.GetClassName() == "BossRifleSpawner" && !random(0,4)
		&& cvar.getcvar("hd_shitbossting_spawn").getbool()){
			if(!random(0,99)) actor.spawn("BossRifleButItsTheWorst", e.thing.pos);
			else if(random(0,1)) actor.spawn("BossRifleNine", e.thing.pos);
			else actor.spawn("BossRifleFour", e.thing.pos);
			e.Thing.Destroy();
		}
		else {
			let a = HDAmmo(e.Thing);
			string lol = "HD5mm_Ammo";
			class<Inventory> b = lol;
			if(a) {
				if (a.GetClassName() == "HDPistolAmmo") {
					a.ItemsThatUseThis.Push("BossRifleButIts9mm");
					if (!b) 
						a.ItemsThatUseThis.Push("BossRifleButItsFuckingPink");
				}
				else if (a.GetClassName() == "FourMilAmmo") 
					a.ItemsThatUseThis.Push("BossRifleButIts4mm");
				else if (a.GetClassName() == "SevenMilAmmo") 
					a.ItemsThatUseThis.Push("BossRifleButItsTheWorst");
				else if (a.GetClassName() == "HD9MClip")
					a.ItemsThatUseThis.Push("BossRifleButIts9mm");
				else if (a.GetClassName() == "HD5mm_Ammo")
					a.ItemsThatUseThis.Push("BossRifleButItsFuckingPink");
			}
		}
	}
}

class BossRifleNine:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			string lol = "HD9mClip";
			class<Inventory> nineclip = lol;
		
			let ass = spawn("HD9mBoxPickup",(pos.x+randompick(-4,-2,2,4),pos.y+randompick(-4,-2,2,4),pos.z),ALLOW_REPLACE);
			HDUPK box = HDUPK(ass);
			HDMagAmmo mag = HDMagAmmo(ass);
			if(box) {
				if (nineclip) {
					box.amount = 30;
				}
				else box.amount = 60;
			}
			else if (mag) {
				if (nineclip) {
					mag.mags.clear();
					mag.amount=0;
					mag.AddAMag(30);
				}
				else {
					mag.mags.clear();
					mag.amount=0;
					mag.AddAMag(60);
				}
			}
			if (nineclip) {
				spawn(nineclip,(pos.x+randompick(-1,1),pos.y+randompick(-1,1),pos.z),ALLOW_REPLACE);
				spawn(nineclip,(pos.x+randompick(-3,3),pos.y+randompick(-3,3),pos.z),ALLOW_REPLACE);
				spawn(nineclip,(pos.x+randompick(-5,5),pos.y+randompick(-5,5),pos.z),ALLOW_REPLACE);
			}

			let ggg=BossRifle(spawn("BossRifleButIts9mm",pos,ALLOW_REPLACE));
			if(!ggg)return;
			ggg.special=special;
			ggg.vel=vel;
			for(int i=0;i<5;i++)ggg.args[i]=args[i];
		}stop;
	}
}
class BossRifleFour:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			double px = pos.x+randompick(-3,3);
			double py = pos.y+randompick(-3,3);
			let ass = HDMagAmmo(spawn("HD4mMag",(px,py,pos.z),ALLOW_REPLACE));
			if(ass) {
				ass.mags.clear();
				ass.amount=0;
				ass.AddAMag(50-randomiseamount());
			}
			px = pos.x+randompick(-2,2);
			py = pos.y+randompick(-2,2);
			ass = HDMagAmmo(spawn("HD4mMag",(px,py,pos.z),ALLOW_REPLACE));
			if(ass) {
				ass.mags.clear();
				ass.amount=0;
				ass.AddAMag(50-randomiseamount());
			}
			px = pos.x+randompick(-1,1);
			py = pos.y+randompick(-1,1);
			ass = HDMagAmmo(spawn("HD4mMag",(px,py,pos.z),ALLOW_REPLACE));
			if(ass) {
				ass.mags.clear();
				ass.amount=0;
				ass.AddAMag(50-randomiseamount());
			}

			let ggg=BossRifle(spawn("BossRifleButIts4mm",pos,ALLOW_REPLACE));
			if(!ggg)return;
			ggg.special=special;
			ggg.vel=vel;
			for(int i=0;i<5;i++)ggg.args[i]=args[i];
		}stop;
	}
	int randomiseamount(){
		if (!random(0,3)) return 1+randomiseamount();
		else return 0;
	}
}

class HDShitbostDummy:HDWeapon{
	default{
		-hdweapon.fitsinbackpack
		hdweapon.refid "boj";
		tag "Boss rifle variant";
		inventory.icon "BOJGY0";

		hdweapon.loadoutcodes "
			\cuNine - 0-1, 9mm Boss Rifle
			\cuFour - 0-1, 4mm Boss Rifle
			\cuPink - 0-1, Hexadoken's Personal Rifle/.22 LR Boss Rifle
			\cuGold - 0-1, Lightspeed Boss Rifle";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override double weaponbulk(){
		return 144;
	}
	override void PostBeginPlay(){
		if(!owner) return;
		GiveWeapon(owner, weaponstatus[0],weaponstatus[1],weaponstatus[2],weaponstatus[3],weaponstatus[4],weaponstatus[5]);
		let spw=spareweapons(owner.findinventory("spareweapons"));
			if(spw) {
				for(int i=0;i<spw.weapontype.size();i++)
					if(spw.weapontype[i]=="HDShitbostDummy"){
						GiveWeapon(owner, spw.GetWeaponValue(i,0), spw.GetWeaponValue(i,1), spw.GetWeaponValue(i,2),
							 spw.GetWeaponValue(i,3), spw.GetWeaponValue(i,4), spw.GetWeaponValue(i,5));
					}
				for(int i=spw.weapontype.size();i>0;--i)
					if(spw.weapontype[i-1]=="HDShitbostDummy"){
						spw.weapontype.Delete(i-1);
						spw.weaponstatus.Delete(i-1);
						spw.weaponbulk.Delete(i-1);
					}
			}
		owner.takeinventory("HDShitbostDummy", 1);
	}
	void GiveWeapon(actor plr, int type, int custom, int front, int drop, int zoom, int YEET){
		string wn;
		switch(type) {
			default:
			case 0: wn="BossRifleButIts9mm"; break;
			case 1: wn="BossRifleButIts4mm"; break;
			case 2: wn="BossRifleButItsTheWorst"; break;
			case 3: wn="BossRifleButItsFuckingPink"; break;
		}
		let newwep=hdweapon(hdweapon.spawn(wn,plr.pos));
		if(newwep){
			if(custom) newwep.weaponstatus[0]|=BOSSF_CUSTOMCHAMBER;
			if(front) newwep.weaponstatus[0]|=BOSSF_FRONTRETICLE;
			if(yeet) newwep.weaponstatus[0]|=BOSSF_YEETABLE;
			if(drop>=0) newwep.weaponstatus[BOSSS_DROPADJUST]=clamp(drop,0,600);
			else newwep.weaponstatus[BOSSS_DROPADJUST]=160;
			if(zoom>0) newwep.weaponstatus[BOSSS_ZOOM]=
				(newwep.weaponstatus[0]&BOSSF_FRONTRETICLE)?
				clamp(zoom,12,40):
				clamp(zoom,5,60);
			else newwep.weaponstatus[BOSSS_ZOOM]=20;
			newwep.actualpickup(plr,true);
		}
	}
	override void loadoutconfigure(string input){
		int nine=getloadoutvar(input,"nine",1);
		int four=getloadoutvar(input,"four",1);
		int gold=getloadoutvar(input,"worst",1);
		int pink=getloadoutvar(input,"hexadoken",1);
		
		if(gold>0 && nine<0 && four<0 && pink<0) weaponstatus[0]=2;
		else if (pink>0 && nine<0 && four<0 && gold<0) weaponstatus[0]=3;
		else if (four>0 && nine<0 && gold<0 && pink<0) weaponstatus[0]=1;
		else if (nine>0 && four<0 && gold<0 && pink<0) weaponstatus[0]=0;
		else weaponstatus[0]=random(0,1);
	
		int customchamber=getloadoutvar(input,"customchamber",1);
		int frontreticle=getloadoutvar(input,"frontreticle",1);
		int bulletdrop=getloadoutvar(input,"bulletdrop",3);
		int zoom=getloadoutvar(input,"zoom",3);
		int yeetable=getloadoutvar(input,"yeetable",1);
		
		
		if(customchamber>0)weaponstatus[1]=1;
		if(frontreticle>0)weaponstatus[2]=1;
		weaponstatus[3]=bulletdrop;
		if(zoom>0)weaponstatus[4]=zoom;
		if(yeetable>0)weaponstatus[5]=1;
	}
}

class HDB_Pink:HDBulletActor{
	default{
		pushfactor 0.45;
		mass 26;
		speed 600;
		accuracy 270;
		stamina 570;
		woundhealth 10;
		hdbulletactor.hardness 3;
	}
}