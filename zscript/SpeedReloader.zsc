const HDHD_776SRL="7SL";

class SpeedRunLoader:AutoReloader{
	default{
		inventory.pickupmessage "You got the 7.76 reloading machine prototype! Note: HexaDoken Industries is not responsible for any damages caused by usage of this device.";
		scale 0.5;
		hdweapon.refid HDHD_776SRL;
		tag "7.76mm Speed-Reloader Prototype";
	}
	int chugdelay;
	override double weaponbulk(){
		return 35*amount;
	}
	override string,double getpickupsprite(){return "RLDRB0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){ //literally overriding one sprite here
		vector2 bob=hpl.wepbob*0.3;
		int brass=hpl.countinv("SevenMilBrass");
		int fourm=hpl.countinv("FourMilAmmo");
		double lph=(brass&&fourm>=4)?1.:0.6;
		sb.drawimage("RLDRB0",(0,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER,
			alpha:lph,scale:(2,2)
		);
		sb.drawimage("RBRSA3A7",(-30,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER|sb.DI_ITEM_RIGHT,
			alpha:lph,scale:(2.5,2.5)
		);
		sb.drawimage("RCLSA3A7",(30,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER|sb.DI_ITEM_LEFT,
			alpha:lph,scale:(1.9,4.7)
		);
		sb.drawstring(
			sb.psmallfont,""..brass,(-30,-54)+bob,
			sb.DI_TEXT_ALIGN_RIGHT|sb.DI_SCREEN_CENTER_BOTTOM,
			fourm?Font.CR_GOLD:Font.CR_DARKGRAY,alpha:lph
		);
		sb.drawstring(
			sb.psmallfont,""..fourm,(30,-54)+bob,
			sb.DI_TEXT_ALIGN_LEFT|sb.DI_SCREEN_CENTER_BOTTOM,
			fourm?Font.CR_LIGHTBLUE:Font.CR_DARKGRAY,alpha:lph
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Assemble rounds (Stand the hell back)\n"
		..WEPHELP_UNLOAD.."+"..WEPHELP_USE.."  same"
		;
	}
	void A_SpeedMakeRound(){
		if(brass<1||powders<4){
			makinground=false;
			setstatelabel("spawn");
			return;
		}
		brass--;powders-=4;
		A_StartSound("roundmaker/pop",CHAN_VOICE);
		int brek = cvar.findcvar("hdspeedrunloader_breakchance").GetInt();
		if(random(1,brek)==1){
			A_SpawnItemEx("HDExplosion");
			A_Explode(32,32);
		}else A_SpawnItemEx("HDLoose7mm",0,0,0,1,0,3,0,SXF_NOCHECKPOSITION);
	}
	action void A_SpeedCheckChug(bool anyotherconditions=true){
		if(
			anyotherconditions
			&&countinv("SevenMilBrass")
			&&countinv("FourMilAmmo")>=4
		){
			invoker.makinground=true;
			int cap = cvar.findcvar("hdspeedrunloader_capacity").GetInt();
			int counter=min(cap,countinv("SevenMilBrass"));
			invoker.brass=counter;A_TakeInventory("SevenMilBrass",counter);
			counter=min(cap*4,countinv("FourMilAmmo"));
			invoker.powders=counter;A_TakeInventory("FourMilAmmo",counter);
			dropinventory(invoker);
		}
	}
	states{
	select0:
		TNT1 A 0 A_Raise(999);
		wait;
	deselect0:
		TNT1 A 0 A_Lower(999);
		wait;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALLOWUSER4);
		goto readyend;
	fire:
		TNT1 A 0 A_SpeedCheckChug();
		goto ready;
	hold:
		TNT1 A 1;
		TNT1 A 0 A_Refire("hold");
		goto ready;
	user4:
	unload:
		TNT1 A 1 A_SpeedCheckChug(pressinguse());
		goto ready;
	spawn:
		RLDR B 35 nodelay {invoker.chugdelay = random(1,4);}
	spawn2:
		RLDR B -1 A_JumpIf(
			invoker.makinground
			&&invoker.brass>0
			&&invoker.powders>=4,
		"chug");
		stop;
	chug:
		---- A 2 {
			invoker.A_Chug(); 
			invoker.chugdelay--; 
		}
		---- A 0 A_JumpIf(invoker.chugdelay, "Chug");
		---- A 2{invoker.A_SpeedMakeRound(); invoker.chugdelay = random(1,4);}
		---- A 0 A_Jump(256,"spawn2");
		---- A -1;
		stop;
	}
}